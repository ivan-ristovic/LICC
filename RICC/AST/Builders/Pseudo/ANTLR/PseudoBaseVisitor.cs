#nullable disable
namespace RICC.AST.Builders.Pseudo
{
	//------------------------------------------------------------------------------
	// <auto-generated>
	//     This code was generated by a tool.
	//     ANTLR Version: 4.7.1
	//
	//     Changes to this file may cause incorrect behavior and will be lost if
	//     the code is regenerated.
	// </auto-generated>
	//------------------------------------------------------------------------------

	// Generated from Pseudo.g4 by ANTLR 4.7.1

	// Unreachable code detected
#pragma warning disable 0162
	// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
	// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
	// Ambiguous reference in cref attribute
#pragma warning disable 419

	using Antlr4.Runtime.Misc;
	using Antlr4.Runtime.Tree;
	using IToken = Antlr4.Runtime.IToken;
	using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

	/// <summary>
	/// This class provides an empty implementation of <see cref="IPseudoVisitor{Result}"/>,
	/// which can be extended to create a visitor which only needs to handle a subset
	/// of the available methods.
	/// </summary>
	/// <typeparam name="Result">The return type of the visit operation.</typeparam>
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
	[System.CLSCompliant(false)]
	public partial class PseudoBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IPseudoVisitor<Result>
	{
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.unit"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitUnit([NotNull] PseudoParser.UnitContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.block"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitBlock([NotNull] PseudoParser.BlockContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.statement"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitStatement([NotNull] PseudoParser.StatementContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.declaration"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitDeclaration([NotNull] PseudoParser.DeclarationContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.parlist"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitParlist([NotNull] PseudoParser.ParlistContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.assignment"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitAssignment([NotNull] PseudoParser.AssignmentContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.exp"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitExp([NotNull] PseudoParser.ExpContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.aexp"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitAexp([NotNull] PseudoParser.AexpContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.lexp"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitLexp([NotNull] PseudoParser.LexpContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.aop"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitAop([NotNull] PseudoParser.AopContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.rop"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitRop([NotNull] PseudoParser.RopContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.lop"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitLop([NotNull] PseudoParser.LopContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.uop"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitUop([NotNull] PseudoParser.UopContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.cexp"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitCexp([NotNull] PseudoParser.CexpContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.explist"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitExplist([NotNull] PseudoParser.ExplistContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.literal"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitLiteral([NotNull] PseudoParser.LiteralContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.type"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitType([NotNull] PseudoParser.TypeContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.typename"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitTypename([NotNull] PseudoParser.TypenameContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.var"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitVar([NotNull] PseudoParser.VarContext context) { return VisitChildren(context); }
		/// <summary>
		/// Visit a parse tree produced by <see cref="PseudoParser.iexp"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitIexp([NotNull] PseudoParser.IexpContext context) { return VisitChildren(context); }
	}
}